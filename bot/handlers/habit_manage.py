from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from bot.db.base import get_async_session
from bot.fsm.habit import RelapseLogging
from bot.services.habit import HabitService
from bot.keyboards.common import get_habit_list_keyboard, get_habit_actions_keyboard

router = Router()

@router.message(F.text == "üìä My Habits")
async def show_habits(
    message: Message,
    session: AsyncSession
):
    habit_service = HabitService(session)
    habits = await habit_service.get_user_habits(message.from_user.id)
    
    if not habits:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫!\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ûï Add Habit, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é."
        )
        return

    await message.answer(
        "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏:\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=get_habit_list_keyboard(habits)
    )

@router.callback_query(F.data.startswith("habit:"))
@router.callback_query(F.data.startswith("stats:"))
async def show_habit_details(
    callback: CallbackQuery,
    session: AsyncSession
):
    habit_id = callback.data.split(":")[1]
    habit_service = HabitService(session)
    stats = await habit_service.get_habit_stats(habit_id)
    
    streak = stats.current_streak
    streak_text = f"{streak.days}–¥ {streak.hours}—á {streak.minutes}–º {streak.seconds}—Å"
    
    avg_period = stats.average_period
    avg_period_text = f"{avg_period.days}–¥ {avg_period.hours}—á {avg_period.minutes}–º {avg_period.seconds}—Å"
    
    await callback.message.edit_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {streak_text}\n"
        f"–í—Å–µ–≥–æ —Å—Ä—ã–≤–æ–≤: {stats.total_relapses}\n"
        f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg_period_text}\n\n"
        f"–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=get_habit_actions_keyboard(habit_id)
    )

@router.message(F.text == "üìù Log Relapse")
async def start_relapse_logging(
    message: Message,
    state: FSMContext,
    session: AsyncSession
):
    habit_service = HabitService(session)
    habits = await habit_service.get_user_habits(message.from_user.id)
    
    if not habits:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —Å—Ä—ã–≤–∞!")
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏–∑–æ—à–µ–ª —Å—Ä—ã–≤:",
        reply_markup=get_habit_list_keyboard(habits)
    )
    await state.set_state(RelapseLogging.waiting_for_habit)

@router.callback_query(F.data.startswith("relapse:"))
async def start_relapse_from_habit(callback: CallbackQuery, state: FSMContext):
    habit_id = callback.data.split(":")[1]
    await state.update_data(habit_id=habit_id)
    
    await callback.message.edit_text(
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É —Å—Ä—ã–≤–∞? (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤—ã—è–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã.\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
    )
    await state.set_state(RelapseLogging.waiting_for_reason)

@router.callback_query(RelapseLogging.waiting_for_habit)
async def process_relapse_habit(callback: CallbackQuery, state: FSMContext):
    habit_id = callback.data.split(":")[1]
    await state.update_data(habit_id=habit_id)
    
    await callback.message.edit_text(
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É —Å—Ä—ã–≤–∞? (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤—ã—è–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã.\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
    )
    await state.set_state(RelapseLogging.waiting_for_reason)

@router.message(RelapseLogging.waiting_for_reason)
async def process_relapse_reason(
    message: Message,
    state: FSMContext,
    session: AsyncSession
):
    data = await state.get_data()
    habit_id = data["habit_id"]
    reason = None if message.text == "/skip" else message.text
    
    habit_service = HabitService(session)
    await habit_service.log_relapse(habit_id, reason)
    
    await message.answer(
        "–°—Ä—ã–≤ –æ—Ç–º–µ—á–µ–Ω. –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –∫–∞–∂–¥–∞—è –Ω–µ—É–¥–∞—á–∞ - —ç—Ç–æ —à–∞–≥ –∫ —É—Å–ø–µ—Ö—É! üí™\n"
        "–í–∞—à–∞ –Ω–æ–≤–∞—è —Å–µ—Ä–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."
    )
    await state.clear() 