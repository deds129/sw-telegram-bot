from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from bot.db.base import get_async_session
from bot.fsm.habit import HabitCreation, HabitDeletion
from bot.services.habit import HabitService
from bot.models.schemas import HabitCreate
from bot.keyboards.common import get_habit_actions_keyboard, get_confirm_keyboard

# –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ –º–æ–¥—É–ª—è
router = Router()
user_data = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏

@router.message(HabitCreation.waiting_for_name)
async def process_habit_name(
    message: Message,
    state: FSMContext,
    session: AsyncSession
):
    habit_service = HabitService(session)
    try:
        habit = await habit_service.create_habit(
            user_id=message.from_user.id,
            habit_data=HabitCreate(name=message.text)
        )
        await message.answer(
            f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{habit.name}' —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ—ë. –í—ã –º–æ–∂–µ—Ç–µ:\n"
            f"üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            f"üìù –û—Ç–º–µ—á–∞—Ç—å —Å—Ä—ã–≤—ã\n"
            f"‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É",
            reply_markup=get_habit_actions_keyboard(str(habit.id))
        )
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()

@router.callback_query(F.data.startswith("delete:"))
async def process_delete_request(callback: CallbackQuery, state: FSMContext):
    habit_id = callback.data.split(":")[1]
    await state.update_data(habit_id=habit_id)
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É?\n"
        "–í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω!",
        reply_markup=get_confirm_keyboard()
    )
    await state.set_state(HabitDeletion.waiting_for_confirmation)

@router.callback_query(HabitDeletion.waiting_for_confirmation, F.data == "confirm")
async def confirm_habit_deletion(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession
):
    data = await state.get_data()
    habit_id = data["habit_id"]
    
    habit_service = HabitService(session)
    try:
        await habit_service.delete_habit(habit_id)
        await callback.message.edit_text("‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    except ValueError as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()

@router.callback_query(HabitDeletion.waiting_for_confirmation, F.data == "cancel")
async def cancel_habit_deletion(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
